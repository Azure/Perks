$schema: 'http://json-schema.org/draft-07/schema#'
definitions:
  APIKeySecurityScheme:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
        enum:
          - apiKey
      description:
        type: string
      in:
        $ref: '#/definitions/ParameterLocation'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - in
      - name
      - type
  AllSchemaTypes:
    type: string
    enum:
      - and
      - array
      - boolean
      - byte-array
      - char
      - choice
      - constant
      - credential
      - date
      - date-time
      - dictionary
      - duration
      - integer
      - number
      - object
      - odata-query
      - or
      - string
      - unixtime
      - uri
      - uuid
      - xor
  AllSchemas:
    anyOf:
      - $ref: '#/definitions/NumberSchema'
      - $ref: '#/definitions/StringSchema'
      - $ref: '#/definitions/ObjectSchema'
      - $ref: '#/definitions/BooleanSchema'
      - $ref: '#/definitions/CredentialSchema'
      - $ref: '#/definitions/UriSchema'
      - $ref: '#/definitions/UuidSchema'
      - $ref: '#/definitions/DurationSchema'
      - $ref: '#/definitions/DateTimeSchema'
      - $ref: '#/definitions/DateSchema'
      - $ref: '#/definitions/CharSchema'
      - $ref: '#/definitions/ByteArraySchema'
      - $ref: '#/definitions/UnixTimeSchema'
      - $ref: '#/definitions/AndSchema'
      - $ref: '#/definitions/OrSchema'
      - $ref: '#/definitions/ArraySchema'
      - $ref: '#/definitions/ChoiceSchema'
      - $ref: '#/definitions/DictionarySchema'
      - $ref: '#/definitions/ConstantSchema'
  AndSchema:
    type: object
    description: an AND relationship between several schemas
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - and
      description:
        type: string
        description: description of the aspect.
      allOf:
        type: array
        description: the set of schemas that this schema is composed of.
        items:
          $ref: '#/definitions/Schema<ObjectSchemaTypes>'
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - allOf
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  ApiVersion:
    type: object
    description: |-
      - since API version formats range from 
      Azure ARM API date style (2018-01-01) to semver (1.2.3) 
      and virtually any other text, this value tends to be an 
      opaque string with the possibility of a modifier to indicate
      that it is a range.

      options: 
      - prepend a dash or append a plus to indicate a range 
      (ie, '2018-01-01+' or '-2019-01-01', or '1.0+' )

      - semver-range style (ie, '^1.0.0' or '~1.0.0' )
    properties:
      range:
        type: string
        enum:
          - +
          - '-'
      version:
        type: string
        description: the actual api version string used in the API
    required:
      - version
  ApiVersions:
    type: array
    description: a collection of api versions
    items:
      $ref: '#/definitions/ApiVersion'
  ArraySchema:
    type: object
    description: a Schema that represents and array of values
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - array
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      elementType:
        description: elementType of the array
        $ref: '#/definitions/Schema'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      maxItems:
        type: number
        description: maximum number of elements in the array
      minItems:
        type: number
        description: minimum number of elements in the array
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      uniqueItems:
        type: boolean
        description: if the elements in the array should be unique
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - elementType
      - language
      - protocol
      - serialization
      - type
      - uid
  AuthorizationCodeOAuthFlow:
    type: object
    properties:
      authorizationUrl:
        type: string
        description: an URI
      refreshUrl:
        type: string
        description: an URI
      scopes:
        $ref: '#/definitions/Dictionary<string>'
      tokenUrl:
        type: string
        description: an URI
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - authorizationUrl
      - scopes
      - tokenUrl
  BearerHTTPSecurityScheme:
    type: object
    properties:
      type:
        type: string
        enum:
          - http
      description:
        type: string
      bearerFormat:
        type: string
      scheme:
        type: string
        enum:
          - bearer
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - scheme
      - type
  BooleanSchema:
    type: object
    description: a schema that represents a boolean value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - boolean
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  ByteArraySchema:
    type: object
    description: a schema that represents a ByteArray value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - byte-array
      format:
        type: string
        description: date-time format
        enum:
          - base64url
          - byte
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - format
      - language
      - protocol
      - serialization
      - type
      - uid
  CharSchema:
    type: object
    description: a schema that represents a Char value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - char
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  ChoiceSchema:
    type: object
    description: 'a schema that represents a choice of several values (ie, an ''enum'')'
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - choice
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      choiceType:
        description: the primitive type for the choices
        $ref: '#/definitions/ChoiceType'
      choices:
        type: array
        description: the possible choices for in the set
        items:
          $ref: '#/definitions/ChoiceValue'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      sealed:
        type: boolean
        description: if the set of choices is irrevocably sealed
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - choiceType
      - choices
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  ChoiceType:
    type: object
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        description: the schema type
        $ref: '#/definitions/AllSchemaTypes'
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  ChoiceValue:
    type: object
    description: an individual choice in a ChoiceSchema
    properties:
      name:
        type: string
        description: the name this value should use
      description:
        type: string
        description: the description for this value
      value:
        type:
          - string
          - number
          - boolean
        description: the actual value
    required:
      - description
      - name
      - value
  ClientCredentialsFlow:
    type: object
    properties:
      refreshUrl:
        type: string
        description: an URI
      scopes:
        $ref: '#/definitions/Dictionary<string>'
      tokenUrl:
        type: string
        description: an URI
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - scopes
      - tokenUrl
  CodeModel:
    type: object
    description: the model that contains all the information required to generate a service api
    properties:
      schemas:
        description: All schemas for the model
        $ref: '#/definitions/Schemas'
      info:
        description: Code model information
        $ref: '#/definitions/Info'
      operationGroups:
        type: array
        description: All operations
        items:
          $ref: '#/definitions/OperationGroup'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - info
      - language
      - operationGroups
      - protocol
      - schemas
  CompoundSchemaTypes:
    type: string
    enum:
      - and
      - or
      - xor
  CompoundSchemas:
    anyOf:
      - $ref: '#/definitions/AndSchema'
      - $ref: '#/definitions/OrSchema'
      - $ref: '#/definitions/XorSchema'
  ConstantSchema:
    type: object
    description: a schema that represents a constant value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - constant
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      constantSchema:
        description: 'the schema type of the constant value (ie, StringSchema, NumberSchema, etc)'
        $ref: '#/definitions/ConstantType'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      value:
        description: the actual constant value
        $ref: '#/definitions/Value'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - constantSchema
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
      - value
  ConstantType:
    type: object
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        description: the schema type
        $ref: '#/definitions/AllSchemaTypes'
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  ConstantValue:
    type: object
    description: a container for the actual constant value
    properties:
      value:
        description: the actual constant value to use
    required:
      - value
  Contact:
    type: object
    description: contact information
    properties:
      name:
        type: string
      email:
        type: string
      url:
        type: string
        description: an URI
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
  CredentialSchema:
    type: object
    description: a schema that represents a Credential value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - credential
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      maxLength:
        type: number
        description: the maximum length of the string
      minLength:
        type: number
        description: the minimum length of the string
      pattern:
        type: string
        description: a regular expression that the string must be validated against
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  DateSchema:
    type: object
    description: a schema that represents a Date value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - date
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  DateTimeSchema:
    type: object
    description: a schema that represents a DateTime value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - date-time
      format:
        type: string
        description: date-time format
        enum:
          - date-time
          - date-time-rfc1123
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - format
      - language
      - protocol
      - serialization
      - type
      - uid
  Default:
    type: string
    description: A catch-all for all un-handled response codes.
    enum:
      - default
  Deprecation:
    type: object
    description: represents  deprecation information for a given aspect
    properties:
      apiVersions:
        type: array
        description: the api versions that this deprecation is applicable to.
        items:
          $ref: '#/definitions/ApiVersion'
      message:
        type: string
        description: the reason why this aspect
    required:
      - apiVersions
      - message
  Dictionary<ApiVersion>:
    type: object
    additionalProperties:
      $ref: '#/definitions/ApiVersion'
  Dictionary<any>:
    type: object
    additionalProperties: true
  Dictionary<string>:
    type: object
    additionalProperties:
      type: string
  DictionarySchema:
    type: object
    description: a schema that represents a key-value collection
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - dictionary
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      elementType:
        description: the element type of the dictionary. (Keys are always strings)
        $ref: '#/definitions/Schema'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - elementType
      - language
      - protocol
      - serialization
      - type
      - uid
  Discriminator:
    type: object
    description: Disciminator for polymorphic class hierarchy
    properties:
      mapping:
        $ref: '#/definitions/Dictionary<string>'
      propertyName:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - propertyName
  DurationSchema:
    type: object
    description: a schema that represents a Duration value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - duration
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  Example:
    type: object
    description: 'example data [UNFINISHED]'
    properties:
      description:
        type: string
      externalValue:
        type: string
        description: an URI
      summary:
        type: string
  Extensions:
    type: object
    properties:
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
  ExternalDocumentation:
    type: object
    description: a reference to external documentation
    properties:
      description:
        type: string
      url:
        type: string
        description: an URI
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - url
  HTTPSecurityScheme:
    anyOf:
      - $ref: '#/definitions/BearerHTTPSecurityScheme'
      - $ref: '#/definitions/NonBearerHTTPSecurityScheme'
  HttpMethod:
    type: string
    description: standard HTTP protocol methods
    enum:
      - delete
      - get
      - head
      - options
      - patch
      - post
      - put
      - trace
  HttpModel:
    type: object
    description: code model metadata for HTTP protocol
    properties:
      security:
        type: array
        description: a collection of security requirements for the service
        items:
          $ref: '#/definitions/SecurityRequirement'
      servers:
        type: array
        description: a collection of server definitions for the service
        items:
          $ref: '#/definitions/HttpServer'
    required:
      - servers
  HttpMultiPartRequest:
    type: object
    properties:
      path:
        type: string
        description: |-
          A relative path to an individual endpoint. 

          The field name MUST begin with a slash. 
          The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
          Path templating is allowed. 

          When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.
      method:
        description: the HTTP Method used to process this operation
        $ref: '#/definitions/HttpMethod'
      mediaType:
        type: string
        description: must set a media type for the body
      multipart:
        type: boolean
        description: |-
          indicates that the HTTP Request should be a multipart request 

          ie, that it has multiple requests in a single request.
        enum:
          - true
      parts:
        type: array
        description: the multiple request parts that make up this request ?? is this right?
        items:
          $ref: '#/definitions/Request'
      servers:
        type: array
        description: each method must have one or more servers that it is connected to.
        items:
          $ref: '#/definitions/HttpServer'
    required:
      - mediaType
      - method
      - multipart
      - parts
      - path
      - servers
  HttpMultipartRequest:
    type: object
    properties:
      path:
        type: string
        description: |-
          A relative path to an individual endpoint. 

          The field name MUST begin with a slash. 
          The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
          Path templating is allowed. 

          When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.
      method:
        description: the HTTP Method used to process this operation
        $ref: '#/definitions/HttpMethod'
      mediaType:
        type: string
        description: must set a media type for the body
      multipart:
        type: boolean
        description: |-
          indicates that the HTTP Request should be a multipart request 

          ie, that it has multiple requests in a single request.
        default: true
        enum:
          - true
      parts:
        type: array
        description: the multiple request parts that make up this request ?? is this right?
      servers:
        type: array
        description: each method must have one or more servers that it is connected to.
        items:
          $ref: '#/definitions/HttpServer'
    required:
      - mediaType
      - method
      - multipart
      - parts
      - path
      - servers
  HttpParameter:
    type: object
    description: extended metadata for HTTP operation parameters
    properties:
      implementation:
        description: suggested implementation location for this parameter
        $ref: '#/definitions/ImplementationLocation'
      in:
        description: the location that this parameter is placed in the http request
        $ref: '#/definitions/ParameterLocation'
      skipUriEncoding:
        type: boolean
        description: 'when set, this indicates that the content of the parameter should not be subject to URI encoding rules.'
      style:
        description: the Serialization Style used for the parameter.
        $ref: '#/definitions/SerializationStyle'
    required:
      - implementation
      - in
      - style
  HttpRequest:
    type: object
    description: HTTP operation protocol data
    properties:
      path:
        type: string
        description: |-
          A relative path to an individual endpoint. 

          The field name MUST begin with a slash. 
          The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
          Path templating is allowed. 

          When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.
      method:
        description: the HTTP Method used to process this operation
        $ref: '#/definitions/HttpMethod'
      servers:
        type: array
        description: each method must have one or more servers that it is connected to.
        items:
          $ref: '#/definitions/HttpServer'
    required:
      - method
      - path
      - servers
  HttpResponse:
    type: object
    properties:
      headers:
        type: array
        description: content returned by the service in the HTTP headers
        items:
          $ref: '#/definitions/Schema'
      mediaTypes:
        type: array
        description: the possible media types that this response MUST match one of
        items:
          type: string
      statusCodes:
        type: array
        description: the possible HTTP status codes that this response MUST match one of.
        items:
          enum:
            - 100
            - 101
            - 102
            - 103
            - 200
            - 201
            - 202
            - 203
            - 204
            - 205
            - 206
            - 207
            - 208
            - 226
            - 300
            - 301
            - 302
            - 304
            - 305
            - 306
            - 307
            - 308
            - 400
            - 401
            - 402
            - 403
            - 404
            - 405
            - 406
            - 407
            - 408
            - 409
            - 410
            - 411
            - 412
            - 413
            - 414
            - 415
            - 416
            - 417
            - 418
            - 421
            - 422
            - 423
            - 424
            - 425
            - 426
            - 428
            - 429
            - 431
            - 451
            - 500
            - 501
            - 502
            - 503
            - 504
            - 505
            - 506
            - 507
            - 508
            - 510
            - 511
            - default
    required:
      - headers
      - mediaTypes
      - statusCodes
  HttpServer:
    type: object
    description: |-
      An object representing a Server.

      If the uri supports template substitution, then the variables are required.
    properties:
      url:
        type: string
        description: base url for the server
      variables:
        type: array
        description: an optional collection of variables for server templating
        items:
          $ref: '#/definitions/ServerVariable'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
    required:
      - language
      - url
  HttpStreamRequest:
    type: object
    properties:
      path:
        type: string
        description: |-
          A relative path to an individual endpoint. 

          The field name MUST begin with a slash. 
          The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
          Path templating is allowed. 

          When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.
      method:
        description: the HTTP Method used to process this operation
        $ref: '#/definitions/HttpMethod'
      mediaType:
        type: string
        description: must set a media type for the body
      servers:
        type: array
        description: each method must have one or more servers that it is connected to.
        items:
          $ref: '#/definitions/HttpServer'
      stream:
        type: boolean
        enum:
          - true
    required:
      - mediaType
      - method
      - path
      - servers
      - stream
  HttpStreamResponse:
    type: object
    properties:
      headers:
        type: array
        description: content returned by the service in the HTTP headers
        items:
          $ref: '#/definitions/Schema'
      mediaTypes:
        type: array
        description: the possible media types that this response MUST match one of
        items:
          type: string
      statusCodes:
        type: array
        description: the possible HTTP status codes that this response MUST match one of.
        items:
          enum:
            - 100
            - 101
            - 102
            - 103
            - 200
            - 201
            - 202
            - 203
            - 204
            - 205
            - 206
            - 207
            - 208
            - 226
            - 300
            - 301
            - 302
            - 304
            - 305
            - 306
            - 307
            - 308
            - 400
            - 401
            - 402
            - 403
            - 404
            - 405
            - 406
            - 407
            - 408
            - 409
            - 410
            - 411
            - 412
            - 413
            - 414
            - 415
            - 416
            - 417
            - 418
            - 421
            - 422
            - 423
            - 424
            - 425
            - 426
            - 428
            - 429
            - 431
            - 451
            - 500
            - 501
            - 502
            - 503
            - 504
            - 505
            - 506
            - 507
            - 508
            - 510
            - 511
            - default
      stream:
        type: boolean
        description: stream responses
        enum:
          - true
    required:
      - headers
      - mediaTypes
      - statusCodes
      - stream
  HttpWithBodyRequest:
    type: object
    properties:
      path:
        type: string
        description: |-
          A relative path to an individual endpoint. 

          The field name MUST begin with a slash. 
          The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
          Path templating is allowed. 

          When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.
      method:
        description: the HTTP Method used to process this operation
        $ref: '#/definitions/HttpMethod'
      mediaType:
        type: string
        description: must set a media type for the body
      servers:
        type: array
        description: each method must have one or more servers that it is connected to.
        items:
          $ref: '#/definitions/HttpServer'
    required:
      - mediaType
      - method
      - path
      - servers
  ImplementationLocation:
    type: string
    enum:
      - Client
      - Method
  ImplicitOAuthFlow:
    type: object
    properties:
      authorizationUrl:
        type: string
        description: an URI
      refreshUrl:
        type: string
        description: an URI
      scopes:
        $ref: '#/definitions/Dictionary<string>'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - authorizationUrl
      - scopes
  Info:
    type: object
    description: code model information
    properties:
      description:
        type: string
        description: a text description of the service
      contact:
        description: contact information for the service
        $ref: '#/definitions/Contact'
      externalDocs:
        description: External Documentation
        $ref: '#/definitions/ExternalDocumentation'
      license:
        description: license information for th service
        $ref: '#/definitions/License'
      termsOfService:
        type: string
        description: an uri to the terms of service specified to access the service
      title:
        type: string
        description: the title of this service.
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - title
  Language:
    type: object
    properties:
      name:
        type: string
        description: name used in actual implementation
      description:
        type: string
        description: description text - describes this node.
    required:
      - description
      - name
  Languages:
    type: object
    description: custom extensible metadata for individual language generators
    properties:
      default:
        $ref: '#/definitions/Language'
      c:
        $ref: '#/definitions/Language'
      cpp:
        $ref: '#/definitions/Language'
      csharp:
        $ref: '#/definitions/Language'
      go:
        $ref: '#/definitions/Language'
      java:
        $ref: '#/definitions/Language'
      javascript:
        $ref: '#/definitions/Language'
      objectivec:
        $ref: '#/definitions/Language'
      powershell:
        $ref: '#/definitions/Language'
      python:
        $ref: '#/definitions/Language'
      ruby:
        $ref: '#/definitions/Language'
      swift:
        $ref: '#/definitions/Language'
      typescript:
        $ref: '#/definitions/Language'
    required:
      - default
  Languages<SchemaMetadata>:
    type: object
    description: custom extensible metadata for individual language generators
    properties:
      default:
        $ref: '#/definitions/SchemaMetadata'
      c:
        $ref: '#/definitions/SchemaMetadata'
      cpp:
        $ref: '#/definitions/SchemaMetadata'
      csharp:
        $ref: '#/definitions/SchemaMetadata'
      go:
        $ref: '#/definitions/SchemaMetadata'
      java:
        $ref: '#/definitions/SchemaMetadata'
      javascript:
        $ref: '#/definitions/SchemaMetadata'
      objectivec:
        $ref: '#/definitions/SchemaMetadata'
      powershell:
        $ref: '#/definitions/SchemaMetadata'
      python:
        $ref: '#/definitions/SchemaMetadata'
      ruby:
        $ref: '#/definitions/SchemaMetadata'
      swift:
        $ref: '#/definitions/SchemaMetadata'
      typescript:
        $ref: '#/definitions/SchemaMetadata'
    required:
      - default
  License:
    type: object
    description: license information
    properties:
      name:
        type: string
        description: the nameof the license
      url:
        type: string
        description: an uri pointing to the full license text
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - name
  Metadata:
    type: object
    description: common pattern for Metadata on aspects
    properties:
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - language
      - protocol
  NonBearerHTTPSecurityScheme:
    type: object
    properties:
      type:
        type: string
        enum:
          - http
      description:
        type: string
      scheme:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - scheme
      - type
  NotSchema:
    type: object
    description: a NOT relationship between schemas
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - not
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      not:
        description: the schema that this may not be.
        $ref: '#/definitions/Schema'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - not
      - protocol
      - serialization
      - type
      - uid
  NumberSchema:
    type: object
    description: a Schema that represents a Number value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        description: the schema type
        $ref: '#/definitions/NumericSchemaTypes'
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      exclusiveMaximum:
        type: boolean
        description: 'if present, the value must be lower than maximum'
      exclusiveMinimum:
        type: boolean
        description: 'if present, the value must be higher than minimum'
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      maximum:
        type: number
        description: 'if present, the value must be lower than or equal to this (unless exclusiveMaximum is true)'
      minimum:
        type: number
        description: 'if present, the value must be highter than or equal to this (unless exclusiveMinimum is true)'
      multipleOf:
        type: number
        description: 'if present, the number must be an exact multiple of this value'
      precision:
        type: number
        description: 'precision (# of bits?) of the number'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - precision
      - protocol
      - serialization
      - type
      - uid
  NumericSchemaTypes:
    type: string
    enum:
      - integer
      - number
  OAuth2SecurityScheme:
    type: object
    properties:
      type:
        type: string
        enum:
          - oauth2
      description:
        type: string
      flows:
        $ref: '#/definitions/OAuthFlows'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - flows
      - type
  OAuthFlows:
    type: object
    properties:
      authorizationCode:
        $ref: '#/definitions/AuthorizationCodeOAuthFlow'
      clientCredentials:
        $ref: '#/definitions/ClientCredentialsFlow'
      implicit:
        $ref: '#/definitions/ImplicitOAuthFlow'
      password:
        $ref: '#/definitions/PasswordOAuthFlow'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
  ODataQuerySchema:
    type: object
    description: a schema that represents a ODataQuery value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - odata-query
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  ObjectSchema:
    type: object
    description: a schema that represents a type with child properties.
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - object
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      discriminator:
        description: the definition of the polymorphic descriminator for this type
        $ref: '#/definitions/Discriminator'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      maxProperties:
        type: number
        description: maximum number of properties permitted
      minProperties:
        type: number
        description: minimum number of properties permitted
      properties:
        type: array
        description: the collection of properties that are in this object
        items:
          $ref: '#/definitions/Property'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  ObjectSchemaTypes:
    type: string
    enum:
      - and
      - dictionary
      - object
      - or
  ObjectSchemas:
    anyOf:
      - $ref: '#/definitions/ObjectSchema'
      - $ref: '#/definitions/AndSchema'
      - $ref: '#/definitions/OrSchema'
      - $ref: '#/definitions/DictionarySchema'
  OpenIdConnectSecurityScheme:
    type: object
    properties:
      type:
        type: string
        enum:
          - openIdConnect
      description:
        type: string
      openIdConnectUrl:
        type: string
        description: an URI
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - openIdConnectUrl
      - type
  Operation:
    type: object
    description: 'represents a single callable endpoint with a discrete set of inputs, and any number of output possibilities (responses or exceptions)'
    properties:
      $key:
        type: string
      description:
        type: string
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      exceptions:
        type: array
        description: responses that indicate a failed call
        items:
          $ref: '#/definitions/Response'
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      profile:
        description: the apiVersion to use for a given profile name
        $ref: '#/definitions/Dictionary<ApiVersion>'
      request:
        description: the inputs that are used to build the request.
        $ref: '#/definitions/Request'
      responses:
        type: array
        description: responses that indicate a successful call
        items:
          $ref: '#/definitions/Response'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - exceptions
      - language
      - profile
      - protocol
      - request
      - responses
      - uid
  OperationGroup:
    type: object
    description: an operation group represents a container around set of operations
    properties:
      $key:
        type: string
      operations:
        type: array
        items:
          $ref: '#/definitions/Operation'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - language
      - operations
      - protocol
  OrSchema:
    type: object
    description: an OR relationship between several schemas
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - or
      description:
        type: string
        description: description of the aspect.
      anyOf:
        type: array
        description: the set of schemas that this schema is composed of. Every schema is optional
        items:
          $ref: '#/definitions/Schema<ObjectSchemaTypes>'
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - anyOf
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  Parameter:
    type: object
    description: a definition of an discrete input for an operation
    properties:
      $key:
        type: string
      schema:
        description: the schema of this Value
        $ref: '#/definitions/Schema'
      description:
        type: string
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      nullable:
        type: boolean
        description: can null be passed in instead
      required:
        type: boolean
        description: if the value is marked 'required'.
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - schema
      - uid
  ParameterLocation:
    type: string
    description: the location that this parameter is placed in the http request
    enum:
      - body
      - cookie
      - header
      - path
      - query
  PasswordOAuthFlow:
    type: object
    properties:
      refreshUrl:
        type: string
        description: an URI
      scopes:
        $ref: '#/definitions/Dictionary<string>'
      tokenUrl:
        type: string
        description: an URI
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - scopes
      - tokenUrl
  PathEncodingStyle:
    type: string
    enum:
      - label
      - matrix
      - simple
  PrimitiveSchemaTypes:
    type: string
    enum:
      - boolean
      - char
      - credential
      - date
      - date-time
      - duration
      - integer
      - number
      - string
      - unixtime
      - uri
      - uuid
  PrimitiveSchemas:
    anyOf:
      - $ref: '#/definitions/NumberSchema'
      - $ref: '#/definitions/StringSchema'
      - $ref: '#/definitions/BooleanSchema'
      - $ref: '#/definitions/CredentialSchema'
      - $ref: '#/definitions/UriSchema'
      - $ref: '#/definitions/UuidSchema'
      - $ref: '#/definitions/DurationSchema'
      - $ref: '#/definitions/DateTimeSchema'
      - $ref: '#/definitions/DateSchema'
      - $ref: '#/definitions/CharSchema'
      - $ref: '#/definitions/UnixTimeSchema'
  Property:
    type: object
    description: a property is a child value in an object
    properties:
      $key:
        type: string
      schema:
        description: the schema of this Value
        $ref: '#/definitions/Schema'
      description:
        type: string
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      nullable:
        type: boolean
        description: can null be passed in instead
      readOnly:
        type: boolean
        description: 'if the property is marked read-only (ie, not intended to be sent to the service)'
      required:
        type: boolean
        description: if the value is marked 'required'.
      serializedName:
        type: string
        description: the wire name of this property
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - schema
      - serializedName
      - uid
  Protocol:
    type: object
  Protocols:
    type: object
    description: 'custom extensible metadata for individual protocols (ie, HTTP, etc)'
    properties:
      amqp:
        $ref: '#/definitions/Protocol'
      jsonrpc:
        $ref: '#/definitions/Protocol'
      mqtt:
        $ref: '#/definitions/Protocol'
      http:
        $ref: '#/definitions/Protocol'
  QueryEncodingStyle:
    type: string
    enum:
      - deepObject
      - form
      - pipeDelimited
      - spaceDelimited
  Request:
    type: object
    properties:
      parameters:
        type: array
        description: the parameter inputs to the operation
        items:
          $ref: '#/definitions/Parameter'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - language
      - protocol
  Response:
    type: object
    description: a response from a service.
    properties:
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - language
      - protocol
  Schema:
    type: object
    description: The Schema Object allows the definition of input and output data types.
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        description: the schema type
        $ref: '#/definitions/AllSchemaTypes'
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  Schema<ObjectSchemaTypes>:
    type: object
    description: The Schema Object allows the definition of input and output data types.
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        description: the schema type
        $ref: '#/definitions/ObjectSchemaTypes'
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  Schema<PrimitiveSchemaTypes>:
    type: object
    description: The Schema Object allows the definition of input and output data types.
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        description: the schema type
        $ref: '#/definitions/PrimitiveSchemaTypes'
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  SchemaMetadata:
    type: object
    description: language metadata specific to schema instances
    properties:
      name:
        type: string
        description: name used in actual implementation
      description:
        type: string
        description: description text - describes this node.
      discriminatorValue:
        type: string
        description: 'if this is a child of a polymorphic class, this will have the value of the descriminator.'
      namespace:
        type: string
        description: namespace of the implementation of this item
    required:
      - description
      - name
  SchemaResponse:
    type: object
    description: a response that should be deserialized into a result of type(schema)
    properties:
      schema:
        description: the content returned by the service for a given operaiton
        $ref: '#/definitions/Schema'
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - language
      - protocol
      - schema
  SchemaType:
    type: string
    description: possible schema types that indicate the type of schema.
    enum:
      - and
      - array
      - boolean
      - byte-array
      - char
      - choice
      - constant
      - credential
      - date
      - date-time
      - dictionary
      - duration
      - integer
      - not
      - number
      - object
      - odata-query
      - or
      - stream
      - string
      - unixtime
      - unknown
      - uri
      - uuid
      - xor
  Schemas:
    type: object
    description: 'the full set of schemas for a given service, categorized into convenient collections'
    properties:
      choices:
        type: array
        description: 'schemas that represent a set of choices (ie, ''enum'')'
        items:
          $ref: '#/definitions/ChoiceSchema'
      compounds:
        type: array
        description: 'schemas that construct more complex schemas based on compound construction (ie, allOf, oneOf, anyOf)'
        items:
          anyOf:
            - $ref: '#/definitions/AndSchema'
            - $ref: '#/definitions/OrSchema'
            - $ref: '#/definitions/XorSchema'
      constants:
        type: array
        description: constant values that are used in models and parameters
        items:
          $ref: '#/definitions/ConstantSchema'
      dictionaries:
        type: array
        description: schemas that represent key-value dictionaries used in the model.
        items:
          $ref: '#/definitions/DictionarySchema'
      objects:
        type: array
        description: schemas that likely result in the creation of new objects during code generation
        items:
          $ref: '#/definitions/ObjectSchema'
      primitives:
        type: array
        description: primitive schemas that represent things that should be able to be represented without additional classes generated
        items:
          anyOf:
            - $ref: '#/definitions/NumberSchema'
            - $ref: '#/definitions/StringSchema'
            - $ref: '#/definitions/BooleanSchema'
            - $ref: '#/definitions/CredentialSchema'
            - $ref: '#/definitions/UriSchema'
            - $ref: '#/definitions/UuidSchema'
            - $ref: '#/definitions/DurationSchema'
            - $ref: '#/definitions/DateTimeSchema'
            - $ref: '#/definitions/DateSchema'
            - $ref: '#/definitions/CharSchema'
            - $ref: '#/definitions/ByteArraySchema'
            - $ref: '#/definitions/UnixTimeSchema'
            - $ref: '#/definitions/ArraySchema'
            - $ref: '#/definitions/ChoiceSchema'
  Scheme:
    type: string
    enum:
      - bearer
  SecurityRequirement:
    type: object
    description: common ways of serializing simple parameters
  SecurityScheme:
    anyOf:
      - $ref: '#/definitions/BearerHTTPSecurityScheme'
      - $ref: '#/definitions/NonBearerHTTPSecurityScheme'
      - $ref: '#/definitions/OAuth2SecurityScheme'
      - $ref: '#/definitions/APIKeySecurityScheme'
      - $ref: '#/definitions/OpenIdConnectSecurityScheme'
  SecurityType:
    type: string
    enum:
      - apiKey
      - http
      - oauth2
      - openIdConnect
  SerializationFormat:
    type: object
    properties:
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
  SerializationFormats:
    type: object
    description: custom extensible metadata for individual serialization formats
    properties:
      json:
        $ref: '#/definitions/Extensions'
      protobuf:
        $ref: '#/definitions/Extensions'
      xml:
        $ref: '#/definitions/XmlSerlializationFormat'
  SerializationStyle:
    type: string
    description: |-
      The Serialization Style used for the parameter.

      Describes how the parameter value will be serialized depending on the type of the parameter value.
    enum:
      - deepObject
      - form
      - json
      - label
      - matrix
      - pipeDelimited
      - simple
      - spaceDelimited
      - xml
  ServerVariable:
    type: object
    description: An object representing a Server Variable for server URL template substitution.
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      schema:
        description: the schema for the
        anyOf:
          - $ref: '#/definitions/NumberSchema'
          - $ref: '#/definitions/StringSchema'
          - $ref: '#/definitions/ChoiceSchema'
      description:
        type: string
        description: description of the aspect.
      default:
        type: string
        description: 'The default value to use for substitution, which SHALL be sent if an alternate value is not supplied.'
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      required:
        type: boolean
        description: if the value is marked 'required'.
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
    required:
      - $key
      - description
      - language
      - schema
  StatusCode:
    enum:
      - 100
      - 101
      - 102
      - 103
      - 200
      - 201
      - 202
      - 203
      - 204
      - 205
      - 206
      - 207
      - 208
      - 226
      - 300
      - 301
      - 302
      - 304
      - 305
      - 306
      - 307
      - 308
      - 400
      - 401
      - 402
      - 403
      - 404
      - 405
      - 406
      - 407
      - 408
      - 409
      - 410
      - 411
      - 412
      - 413
      - 414
      - 415
      - 416
      - 417
      - 418
      - 421
      - 422
      - 423
      - 424
      - 425
      - 426
      - 428
      - 429
      - 431
      - 451
      - 500
      - 501
      - 502
      - 503
      - 504
      - 505
      - 506
      - 507
      - 508
      - 510
      - 511
      - default
  StreamResponse:
    type: object
    description: a response where the content should be treated as a stream instead of a value or object
    properties:
      stream:
        type: boolean
        description: indicates that this response is a stream
        enum:
          - true
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - language
      - protocol
      - stream
  StringSchema:
    type: object
    description: a Schema that represents a string value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - string
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      maxLength:
        type: number
        description: the maximum length of the string
      minLength:
        type: number
        description: the minimum length of the string
      pattern:
        type: string
        description: a regular expression that the string must be validated against
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  UnixTimeSchema:
    type: object
    description: a schema that represents a UnixTime value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - unixtime
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  UriSchema:
    type: object
    description: a schema that represents a Uri value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - uri
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      maxLength:
        type: number
        description: the maximum length of the string
      minLength:
        type: number
        description: the minimum length of the string
      pattern:
        type: string
        description: a regular expression that the string must be validated against
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  UuidSchema:
    type: object
    description: a schema that represents a Uuid value
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - uuid
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - serialization
      - type
      - uid
  Value:
    type: object
    description: 'common base interface for properties, parameters and the like.'
    properties:
      $key:
        type: string
      schema:
        description: the schema of this Value
        $ref: '#/definitions/Schema'
      description:
        type: string
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      nullable:
        type: boolean
        description: can null be passed in instead
      required:
        type: boolean
        description: if the value is marked 'required'.
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for this aspect
        $ref: '#/definitions/Languages'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - protocol
      - schema
      - uid
  ValueSchemaTypes:
    type: string
    enum:
      - array
      - boolean
      - byte-array
      - char
      - choice
      - credential
      - date
      - date-time
      - duration
      - integer
      - number
      - string
      - unixtime
      - uri
      - uuid
  XmlSerlializationFormat:
    type: object
    properties:
      name:
        type: string
      attribute:
        type: boolean
      namespace:
        type: string
      prefix:
        type: string
      wrapped:
        type: boolean
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
    required:
      - attribute
      - wrapped
  XorSchema:
    type: object
    description: an XOR relationship between several schemas
    properties:
      $key:
        type: string
        description: common name of the aspect -- in OAI3 this was typically the key in the parent dictionary
      type:
        type: string
        description: the schema type
        enum:
          - xor
      description:
        type: string
        description: description of the aspect.
      apiVersions:
        type: array
        description: API versions that this applies to. Undefined means all versions
        items:
          $ref: '#/definitions/ApiVersion'
      defaultValue:
        description: 'If the value isn''t sent on the wire, the service will assume this'
      deprecated:
        description: 'deprecation information -- ie, when this aspect doesn''t apply and why'
        $ref: '#/definitions/Deprecation'
      example:
        description: example information
      externalDocs:
        description: External Documentation Links
        $ref: '#/definitions/ExternalDocumentation'
      oneOf:
        type: array
        description: the set of schemas that this must be one and only one of.
        items:
          $ref: '#/definitions/Schema'
      serialization:
        description: per-serialization information for this Schema
        $ref: '#/definitions/SerializationFormats'
      summary:
        type: string
        description: a short description
      uid:
        type: string
      extensions:
        description: additional metadata extensions dictionary
        $ref: '#/definitions/Dictionary<any>'
      language:
        description: per-language information for Schema uses SchemaMetadata
        $ref: '#/definitions/Languages<SchemaMetadata>'
      protocol:
        description: per-protocol information for this aspect
        $ref: '#/definitions/Protocols'
    required:
      - $key
      - description
      - language
      - oneOf
      - protocol
      - serialization
      - type
      - uid
  email:
    type: string
  uri:
    type: string
    description: an URI
