{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "NumberSchema": {
      "description": "a Schema that represents a Number value",
      "type": "object",
      "properties": {
        "precision": {
          "description": "precision (# of bits?) of the number",
          "type": "number"
        },
        "multipleOf": {
          "description": "if present, the number must be an exact multiple of this value",
          "type": "number"
        },
        "maximum": {
          "description": "if present, the value must be lower than or equal to this (unless exclusiveMaximum is true)",
          "type": "number"
        },
        "exclusiveMaximum": {
          "description": "if present, the value must be lower than maximum",
          "type": "boolean"
        },
        "minimum": {
          "description": "if present, the value must be highter than or equal to this (unless exclusiveMinimum is true)",
          "type": "number"
        },
        "exclusiveMinimum": {
          "description": "if present, the value must be higher than minimum",
          "type": "boolean"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "$ref": "./enums.json#/definitions/NumericSchemaTypes",
          "description": "the schema type"
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "precision",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "StringSchema": {
      "description": "a Schema that represents a string value",
      "type": "object",
      "properties": {
        "maxLength": {
          "description": "the maximum length of the string",
          "type": "number"
        },
        "minLength": {
          "description": "the minimum length of the string",
          "type": "number"
        },
        "pattern": {
          "description": "a regular expression that the string must be validated against",
          "type": "string"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "string"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "ArraySchema": {
      "description": "a Schema that represents and array of values",
      "type": "object",
      "properties": {
        "elementType": {
          "$ref": "./master.json#/definitions/Schema",
          "description": "elementType of the array"
        },
        "maxItems": {
          "description": "maximum number of elements in the array",
          "type": "number"
        },
        "minItems": {
          "description": "minimum number of elements in the array",
          "type": "number"
        },
        "uniqueItems": {
          "description": "if the elements in the array should be unique",
          "type": "boolean"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "array"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "elementType",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "ObjectSchema": {
      "description": "a schema that represents a type with child properties.",
      "type": "object",
      "properties": {
        "discriminator": {
          "$ref": "./master.json#/definitions/Discriminator",
          "description": "the definition of the polymorphic descriminator for this type"
        },
        "properties": {
          "description": "the collection of properties that are in this object",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/Property"
          }
        },
        "maxProperties": {
          "description": "maximum number of properties permitted",
          "type": "number"
        },
        "minProperties": {
          "description": "minimum number of properties permitted",
          "type": "number"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "object"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "ChoiceSchema": {
      "description": "a schema that represents a choice of several values (ie, an 'enum')",
      "type": "object",
      "properties": {
        "choiceType": {
          "$ref": "./schemas.json#/definitions/ChoiceType",
          "description": "the primitive type for the choices"
        },
        "choices": {
          "description": "the possible choices for in the set",
          "type": "array",
          "items": {
            "$ref": "./schemas.json#/definitions/ChoiceValue"
          }
        },
        "sealed": {
          "description": "if the set of choices is irrevocably sealed",
          "type": "boolean"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "choice"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "choiceType",
        "choices",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "ConstantSchema": {
      "description": "a schema that represents a constant value",
      "type": "object",
      "properties": {
        "constantSchema": {
          "$ref": "./schemas.json#/definitions/ConstantType",
          "description": "the schema type of the constant value (ie, StringSchema, NumberSchema, etc)"
        },
        "value": {
          "$ref": "./master.json#/definitions/Value",
          "description": "the actual constant value"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "constant"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "constantSchema",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid",
        "value"
      ]
    },
    "BooleanSchema": {
      "description": "a schema that represents a boolean value",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "boolean"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "ODataQuerySchema": {
      "description": "a schema that represents a ODataQuery value",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "odata-query"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "CredentialSchema": {
      "description": "a schema that represents a Credential value",
      "type": "object",
      "properties": {
        "maxLength": {
          "description": "the maximum length of the string",
          "type": "number"
        },
        "minLength": {
          "description": "the minimum length of the string",
          "type": "number"
        },
        "pattern": {
          "description": "a regular expression that the string must be validated against",
          "type": "string"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "credential"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "UriSchema": {
      "description": "a schema that represents a Uri value",
      "type": "object",
      "properties": {
        "maxLength": {
          "description": "the maximum length of the string",
          "type": "number"
        },
        "minLength": {
          "description": "the minimum length of the string",
          "type": "number"
        },
        "pattern": {
          "description": "a regular expression that the string must be validated against",
          "type": "string"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "uri"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "UuidSchema": {
      "description": "a schema that represents a Uuid value",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "uuid"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "DurationSchema": {
      "description": "a schema that represents a Duration value",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "duration"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "DateTimeSchema": {
      "description": "a schema that represents a DateTime value",
      "type": "object",
      "properties": {
        "format": {
          "description": "date-time format",
          "enum": [
            "date-time",
            "date-time-rfc1123"
          ],
          "type": "string"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "date-time"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "format",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "DateSchema": {
      "description": "a schema that represents a Date value",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "date"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "CharSchema": {
      "description": "a schema that represents a Char value",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "char"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "ByteArraySchema": {
      "description": "a schema that represents a ByteArray value",
      "type": "object",
      "properties": {
        "format": {
          "description": "date-time format",
          "enum": [
            "base64url",
            "byte"
          ],
          "type": "string"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "byte-array"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "format",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "UnixTimeSchema": {
      "description": "a schema that represents a UnixTime value",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "unixtime"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "DictionarySchema": {
      "description": "a schema that represents a key-value collection",
      "type": "object",
      "properties": {
        "elementType": {
          "$ref": "./master.json#/definitions/Schema",
          "description": "the element type of the dictionary. (Keys are always strings)"
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "dictionary"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "elementType",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "AndSchema": {
      "description": "an AND relationship between several schemas",
      "type": "object",
      "properties": {
        "allOf": {
          "description": "the set of schemas that this schema is composed of.",
          "type": "array",
          "items": {
            "$ref": "./schemas.json#/definitions/Schema<ObjectSchemaTypes>"
          }
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "and"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "allOf",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "OrSchema": {
      "description": "an OR relationship between several schemas",
      "type": "object",
      "properties": {
        "anyOf": {
          "description": "the set of schemas that this schema is composed of. Every schema is optional",
          "type": "array",
          "items": {
            "$ref": "./schemas.json#/definitions/Schema<ObjectSchemaTypes>"
          }
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "or"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "anyOf",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "XorSchema": {
      "description": "an XOR relationship between several schemas",
      "type": "object",
      "properties": {
        "oneOf": {
          "description": "the set of schemas that this must be one and only one of.",
          "type": "array",
          "items": {
            "$ref": "./schemas.json#/definitions/Schema<AllSchemaTypes>"
          }
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "xor"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "oneOf",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "NotSchema": {
      "description": "a NOT relationship between schemas",
      "type": "object",
      "properties": {
        "not": {
          "$ref": "./schemas.json#/definitions/Schema<AllSchemaTypes>",
          "description": "the schema that this may not be."
        },
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "description": "the schema type",
          "type": "string",
          "enum": [
            "not"
          ]
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "not",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "Schema<AllSchemaTypes>": {
      "description": "The Schema Object allows the definition of input and output data types.",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "$ref": "./master.json#/definitions/AllSchemaTypes",
          "description": "the schema type"
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "Schema<ObjectSchemaTypes>": {
      "description": "The Schema Object allows the definition of input and output data types.",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "$ref": "./master.json#/definitions/ObjectSchemaTypes",
          "description": "the schema type"
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "Schema<PrimitiveSchemaTypes>": {
      "description": "The Schema Object allows the definition of input and output data types.",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "$ref": "./enums.json#/definitions/PrimitiveSchemaTypes",
          "description": "the schema type"
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "Schemas": {
      "description": "the full set of schemas for a given service, categorized into convenient collections",
      "type": "object",
      "properties": {
        "objects": {
          "description": "schemas that likely result in the creation of new objects during code generation",
          "type": "array",
          "items": {
            "$ref": "./schemas.json#/definitions/ObjectSchema"
          }
        },
        "compounds": {
          "description": "schemas that construct more complex schemas based on compound construction (ie, allOf, oneOf, anyOf)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "./schemas.json#/definitions/AndSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/OrSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/XorSchema"
              }
            ]
          }
        },
        "choices": {
          "description": "schemas that represent a set of choices (ie, 'enum')",
          "type": "array",
          "items": {
            "$ref": "./schemas.json#/definitions/ChoiceSchema"
          }
        },
        "dictionaries": {
          "description": "schemas that represent key-value dictionaries used in the model.",
          "type": "array",
          "items": {
            "$ref": "./schemas.json#/definitions/DictionarySchema"
          }
        },
        "constants": {
          "description": "constant values that are used in models and parameters",
          "type": "array",
          "items": {
            "$ref": "./schemas.json#/definitions/ConstantSchema"
          }
        },
        "primitives": {
          "description": "primitive schemas that represent things that should be able to be represented without additional classes generated",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "./schemas.json#/definitions/NumberSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/StringSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/BooleanSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/CredentialSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/UriSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/UuidSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/DurationSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/DateTimeSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/DateSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/CharSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/ByteArraySchema"
              },
              {
                "$ref": "./schemas.json#/definitions/UnixTimeSchema"
              },
              {
                "$ref": "./schemas.json#/definitions/ArraySchema"
              },
              {
                "$ref": "./schemas.json#/definitions/ChoiceSchema"
              }
            ]
          }
        }
      },
      "defaultProperties": []
    },
    "ChoiceType": {
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "$ref": "./master.json#/definitions/AllSchemaTypes",
          "description": "the schema type"
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "ChoiceValue": {
      "description": "an individual choice in a ChoiceSchema",
      "type": "object",
      "properties": {
        "value": {
          "description": "the actual value",
          "type": [
            "string",
            "number",
            "boolean"
          ]
        },
        "name": {
          "description": "the name this value should use",
          "type": "string"
        },
        "description": {
          "description": "the description for this value",
          "type": "string"
        }
      },
      "defaultProperties": [],
      "required": [
        "description",
        "name",
        "value"
      ]
    },
    "ConstantType": {
      "type": "object",
      "properties": {
        "language": {
          "$ref": "./master.json#/definitions/Languages<SchemaMetadata>",
          "description": "per-language information for Schema uses SchemaMetadata"
        },
        "type": {
          "$ref": "./master.json#/definitions/AllSchemaTypes",
          "description": "the schema type"
        },
        "summary": {
          "description": "a short description",
          "type": "string"
        },
        "example": {
          "description": "example information"
        },
        "defaultValue": {
          "description": "If the value isn't sent on the wire, the service will assume this"
        },
        "serialization": {
          "$ref": "./master.json#/definitions/SerializationFormats",
          "description": "per-serialization information for this Schema"
        },
        "uid": {
          "type": "string"
        },
        "$key": {
          "description": "common name of the aspect -- in OAI3 this was typically the key in the parent dictionary",
          "type": "string"
        },
        "description": {
          "description": "description of the aspect.",
          "type": "string"
        },
        "apiVersions": {
          "description": "API versions that this applies to. Undefined means all versions",
          "type": "array",
          "items": {
            "$ref": "./master.json#/definitions/ApiVersion"
          }
        },
        "deprecated": {
          "$ref": "./master.json#/definitions/Deprecation",
          "description": "deprecation information -- ie, when this aspect doesn't apply and why"
        },
        "externalDocs": {
          "$ref": "./master.json#/definitions/ExternalDocumentation",
          "description": "External Documentation Links"
        },
        "protocol": {
          "$ref": "./master.json#/definitions/Protocols",
          "description": "per-protocol information for this aspect"
        },
        "extensions": {
          "$ref": "./master.json#/definitions/Dictionary<any>",
          "description": "additional metadata extensions dictionary"
        }
      },
      "defaultProperties": [],
      "required": [
        "$key",
        "description",
        "language",
        "protocol",
        "serialization",
        "type",
        "uid"
      ]
    },
    "ConstantValue": {
      "description": "a container for the actual constant value",
      "type": "object",
      "properties": {
        "value": {
          "description": "the actual constant value to use"
        }
      },
      "defaultProperties": [],
      "required": [
        "value"
      ]
    }
  }
}